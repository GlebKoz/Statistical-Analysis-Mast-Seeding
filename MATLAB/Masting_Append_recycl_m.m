%% %function Masting_Append_recycl_m
%computes and stores vals of our model for amount of years specified by num_years
%uses append to store vals
%cycles through different m values



%usage: Use it to compute t (vector of time values from 0 to num_years),
% M (vector of mice count vals from 0 to num_years, same size as t vector),
% S (vector of seed count vals from 0 to num_years, same size as t vector),
% T(vector of tree count vals from 0 to num_years, its size is num_years+1)



%inputs: all the parameters and starting values for our model, as well as:

%m_vector: vector of values of masting coefficients(m values), 
%values of this vector will be cyclically repeated

%t_start_1: starting val of yearly time interval{explanation: see line 18},

% t_int: value of a step that ode45 function takes between
%each intermediate solution {if t_int=0.5, then ode45 will evaluate results
% at t=0, t=0.5, and t=1 } ) ,

% t_end: ending value of yearly time interval {explanation: see line 18}, 
% num_years: total amount of years we want to simulate

%t_start_1 and t_end are introduced in case if we want to say that
% one year interval is between, lets say, t=0 and t=2 (i know it 
% sounds crazy, but this is my vision. in the main model file my one year
% interval is between t=0 and t=1, just as normal people would do)



%outputs: t (vector of time values from 0 to num_years),
% M (vector of mice count vals from 0 to num_years, same size as t vector),
% S (vector of seed count vals from 0 to num_years, same size as t vector),
% T(vector of tree count vals from 0 to num_years, its size is num_years+1) 

function [t,M,S,T] = Masting_Append_recycl_m(T_start_1,g,d_T,alpha,M_start_1,a,b,d,S_start_1,e,m_vector,d_S,t_start_1,t_int,t_end, num_years)

t_diff=t_end-t_start_1; %define one year interval {explanation: see line 18}

yearly_num_t_y=(1/t_int+1);%yearly_num_t_y has value equal to the size of 
% t vector generated by ode45 function


%Here I generate empty variables which i will append with times, mice
%counts, seed counts, and tree counts respectively that I get after each
% yearly cycle
t=[];
M=[];
S=[];
T=T_start_1;






%for loop that computes times, mice counts, seed counts,
% and tree counts on an n-th year
for n=1:num_years % for loops runs num_years times

m_ind=mod(n-1,length(m_vector)); %set index to refer to desired value of m_vector for the current turn of for loop

m=m_vector(1,m_ind+1); %choose m value for the current turn of for loop


T_step=T_diff(S_start_1,T_start_1,g, d_T, alpha); %tree count on n-th year


% t_step -- times of n-th year, y_step -- matrix of mice counts 
% and seed counts on n-th year, where y_step(:,1) is amount
% of mice through time and y_step(:,2) is amount of seeds through time
[t_step,y_step] = ode45(@(t,y) M_S_der(t,y,a, b, d,e),t_start_1:t_int: t_start_1+t_diff,[M_start_1; S_start_1]);


%get the last value for amount of seeds computed on n-th year with
%differential equation
S_almost=y_step(length(y_step),2);

%modify the last value for amount of seeds computed on n-th year with
%differential equation using difference equation
S_last=S_diff(S_almost,T_step,g, d_S, m);

%change the last value of y_step(:,2) so that it accounts for a change
%introduced by difference equation
y_step(length(y_step),2)=S_last;

%each iteration of for loop adds yearly t,M,S,T values to
%the total t,M,S,T values
t=[t;t_step(:,1)];
M=[M;y_step(:,1)];
S=[S;y_step(:,2)];
T=[T;T_step];


% after each year (i.e. after each for loop iteration) set satring values
% to the last values of previous years
t_start_1=t(length(t),1);
T_start_1=T(length(T),1);
S_start_1=S(length(S),1);
M_start_1=M(length(M),1);


end


end